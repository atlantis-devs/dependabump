name: dependabump
author: Bill Beesley <bill@beesley.dev>
description: Simple, automatic, dependency updating
branding:
  icon: box
  color: purple
inputs:
  npm-bin:
    description: Full path to the npm binary to use while installing deps
    required: true
    default: npm
  private-npm-token:
    description: API token for a private npm repository
    required: false
  private-npm-domain:
    description: URL for a private npm repository
    required: false
  filter:
    description: Scope to limit dependency updates by
    required: false
    default: ''
  reject:
    description: Scope to reject dependency updates by
    required: false
    default: ''
  commit-message:
    description: Commit message for dependabump commits
    required: true
    default: 'chore(deps): bump all dependencies'
  base-branch:
    description: Base branch for pull requests
    required: true
    default: 'main'
  dependabump-branch:
    description: Branch to push dependency updates to
    required: true
    default: 'dependencies'
  dependabump-major-branch:
    description: Branch to push major dependency updates to
    required: true
    default: 'major-dependencies'
  commit-author:
    description: github username for commit author
    required: true
    default: 'dependabump'
  working-dir:
    description: optional path to your npm package.json (if not in repo root)
    required: false
runs:
  using: "composite"
  steps:
    - name: npm auth
      run: |
        if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
          cd "${{ inputs.working-dir }}"
        fi
        if [ "${{ inputs.private-npm-token == '' }}" = 'false' ]; then
          echo "//${{ inputs.private-npm-domain }}/:_authToken=${{ inputs.private-npm-token }}" >> .npmrc
          cp .npmrc ~/.npmrc
        fi
      shell: bash
    - name: npm install
      run: |
        if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
          cd "${{ inputs.working-dir }}"
        fi
        ${{ inputs.npm-bin }} ci
        if [ -e lerna.json ]; then
          npx lerna exec -- ${{ inputs.npm-bin }} ci
        fi
      shell: bash
    - name: bump minor & patch dependencies
      run: |
        if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
          cd "${{ inputs.working-dir }}"
        fi
        npx npm-check-updates@12.5.3 -u --target minor --filter '${{ inputs.filter }}' --reject '${{ inputs.reject }}'
        if [ -e lerna.json ]; then
          npx lerna exec --concurrency=1 --stream=true -- npx npm-check-updates@12.5.3 -u --target minor --filter "'${{ inputs.filter }}'" --reject "'${{ inputs.reject }}'"
        fi
      shell: bash
    - name: minor - update package locks
      run: |
        if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
          cd "${{ inputs.working-dir }}"
        fi
        rm -rf node_modules || true
        ${{ inputs.npm-bin }} i
        if [ -e lerna.json ]; then
          npx lerna clean -y
          npx lerna exec -- ${{ inputs.npm-bin }} install
        fi
      shell: bash
    - name: minor - add, commit, push, pr
      run: |
        if [ -n "$(git status --porcelain | grep 'package\.json')" ]; then
          if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
            cd "${{ inputs.working-dir }}"
          fi
          git checkout -b "${{ inputs.dependabump-branch }}"
          git status
          git add package.json package-lock.json || true
          if [ -e lerna.json ]; then
            for FILE in $(git status --porcelain | grep -o "\S*package\.json")
            do
              git add "$FILE"
              git add "$(echo $FILE | sed 's|package\.|package-lock.|')" || true
            done
          fi
          git config user.email "${{ inputs.commit-author }}@users.noreply.github.com"
          git config user.name "${{ inputs.commit-author }}"
          git commit -m "${{ inputs.commit-message }}" || true
          git push --set-upstream origin "${{ inputs.dependabump-branch }}" --force || true
          gh pr create --title "${{ inputs.commit-message }}" --body "Automated update of minor & patch dependencies" --base "${{ inputs.base-branch }}" --head "${{ inputs.dependabump-branch }}" --label dependencies || true
        fi
      shell: bash
    - name: clean up workspace
      shell: bash
      run: |
        git reset HEAD --hard
        git clean -f -d
        git checkout "${{ inputs.base-branch }}"
        if [ "${{ inputs.private-npm-token == '' }}" = 'false' ]; then
          echo "//${{ inputs.private-npm-domain }}/:_authToken=${{ inputs.private-npm-token }}" >> .npmrc
          cp .npmrc ~/.npmrc
        fi
        git branch -D "${{ inputs.dependabump-major-branch }}" || true
    - name: bump major dependencies
      run: |
        if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
          cd "${{ inputs.working-dir }}"
        fi
        npx npm-check-updates@12.5.3 -u --filter '${{ inputs.filter }}' --reject '${{ inputs.reject }}'
        if [ -e lerna.json ]; then
          npx lerna exec --concurrency=1 --stream=true -- npx npm-check-updates@12.5.3 -u --filter "'${{ inputs.filter }}'" --reject "'${{ inputs.reject }}'"
        fi
      shell: bash
    - name: major - update package locks
      run: |
        if [ -n "$(git status --porcelain | grep 'package\.json')" ]; then
          if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
            cd "${{ inputs.working-dir }}"
          fi
          rm -rf node_modules || true
          ${{ inputs.npm-bin }} i
          if [ -e lerna.json ]; then
            npx lerna clean -y
            npx lerna exec -- ${{ inputs.npm-bin }} install
          fi
        fi
      shell: bash
    - name: major - add, commit, push, pr
      run: |
        if [ -n "$(git status --porcelain | grep 'package\.json')" ]; then
          if [ "${{ inputs.working-dir == '' }}" = 'false' ]; then
            cd "${{ inputs.working-dir }}"
          fi
          git checkout -b "${{ inputs.dependabump-major-branch }}"
          git status
          git add package.json package-lock.json || true
          if [ -e lerna.json ]; then
            for FILE in $(git status --porcelain | grep -o "\S*package\.json")
            do
              git add "$FILE"
              if [ -e "$(echo $FILE | sed 's|package\.|package-lock.|')" ]; then
                git add "$(echo $FILE | sed 's|package\.|package-lock.|')" || true
              fi
            done
          fi
          git config user.email "${{ inputs.commit-author }}@users.noreply.github.com"
          git config user.name "${{ inputs.commit-author }}"
          git commit -m "${{ inputs.commit-message }}" -m '

          BREAKING CHANGE: major dependencies updated' || true
          git push --set-upstream origin "${{ inputs.dependabump-major-branch }}" --force || true
          gh pr create --title "${{ inputs.commit-message }} - major changes" --body "Automated update of major dependencies" --base "${{ inputs.base-branch }}" --head "${{ inputs.dependabump-major-branch }}" --label dependencies || true
        fi
      shell: bash
